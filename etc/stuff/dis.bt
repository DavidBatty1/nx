//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: dis.bt
//   Authors: Matt Davies
//   Version: 1
//   Purpose: NX emulator disassembly
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef CHAR ID[4];


typedef struct
{
    ID tag;
}
NX_HEADER;

typedef struct
{
    ID tag;
    WORD version;
    DWORD length;
}
NX_BLOCK_HEADER;

typedef struct
{
    NX_BLOCK_HEADER hdr;
    byte data[hdr.length];
}
NX_BLOCK;

typedef struct
{
    NX_BLOCK_HEADER hdr;
    byte data[65536];
}
NX_MM48;

typedef enum<byte>
{
    LineType_Blank,
    LineType_FullComment,
    LineType_Label,
    LineType_Instruction,
    LineType_END
}
E_LINETYPE;

typedef struct
{
    uint32 tag;
    E_LINETYPE line;
    uint32 startAddr <format=hex>;
    string text;
    uint16 srcAddr <format=hex>;
    unsigned byte b1[4] <format=hex>;
}
NX_LINE;

typedef struct
{
    NX_BLOCK_HEADER hdr;
    uint32 numLines;
    NX_LINE lines[numLines]  <optimize=false>;
    uint32 nextTag;
}
NX_DCMD;


//---------------------------------------------------

NX_HEADER Header;

if (Header.tag != "NX00")
{
    Warning("File is not a valid NX file.");
    return -1;
}

local char tag[5];
local DWORD size;

while (FTell() + 8 <= FileSize() && FTell())
{
    // Read the chunk tag
    ReadBytes(tag, FTell(), 4);
    tag[4] = 0;

    // Read the chunk size
    size = ReadUInt(FTell() + 4);

    // See which tag this is:
    switch(tag)
    {
        case "MM48":
            NX_MM48 mm48;
            break;
        case "DCMD":
            NX_DCMD dcmd;
            break;
        default:
            NX_BLOCK block;
            break;
    }
}
